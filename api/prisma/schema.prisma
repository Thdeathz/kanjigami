generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum BattleStatus {
  UPCOMING
  ONGOING
  FINISHED
}

enum BattleType {
  GOFT
  TIMEATTACK
}

enum GameLogType {
  ONLINE
  OFFLINE
}

enum UserState {
  NORMAL
  PLUS
  BANNED
}

model Account {
  id                String   @id @default(cuid())
  type              String
  userId            String
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  password      String?
  image         String?
  score         Int       @default(0)
  role          UserRole  @default(USER)
  state         UserState @default(NORMAL)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  stacks         Stack[]
  events         Event[]
  gameLogs       GameLog[]
  followedStacks Stack[] @relation("FollowedStacks")
}

model Kanji {
  id        String   @id @default(cuid())
  content   String
  grade     Int?     @default(0)
  kunyomi   String?
  onyomi    String?
  kakikata  String?
  meaning   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  words Word[]
}

model Word {
  id        String   @id @default(cuid())
  content   String
  hiragana  String
  romaji   String
  meaning   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kanjis    Kanji[]
  examples  Example[]
  stacks    Stack[]
}

model Example {
  id        String   @id @default(cuid())
  content   String
  romaji   String
  meaning   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  words Word[]
}

model Stack {
  id          String   @id @default(cuid())
  slug        Int      @unique @default(autoincrement())
  name        String
  description String?
  image       String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])

  words         Word[]
  topics        Topic[]
  games         GameStack[]
  followedUsers User[] @relation("FollowedStacks")

  // This config still not working with Postgres
  // Hope it will be work soon, check here: https://github.com/prisma/prisma/issues/8950
  // @@fulltext([name])
}

model Topic {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stacks Stack[]
}

model Game {
  id        String   @id @default(cuid())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stacks GameStack[]
}

model GameStack {
  id            String   @id @default(cuid())
  gameId        String
  stackId       String
  numberOfWords Int
  timeLimit     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  stack Stack @relation(fields: [stackId], references: [id])
  game  Game  @relation(fields: [gameId], references: [id])

  logs   GameLog[]
  rounds Round[]
}

model Event {
  id          String       @id @default(cuid())
  slug        Int          @unique @default(autoincrement())
  name        String
  description String?
  type        BattleType
  status      BattleStatus
  startAt     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  rounds  Round[]
  joiners User[]
}

model Round {
  id          String       @id @default(cuid())
  order       Int
  status      BattleStatus
  eventId     String
  gameStackId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  event     Event     @relation(fields: [eventId], references: [id])
  gameStack GameStack @relation(fields: [gameStackId], references: [id])

  logs GameLog[]
}

model GameLog {
  id          String      @id @default(cuid())
  point       Int
  time        Int
  type        GameLogType
  gameStackId String?
  roundId     String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  gameStack GameStack? @relation(fields: [gameStackId], references: [id])
  round     Round?     @relation(fields: [roundId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@unique([gameStackId, roundId, userId])
}
